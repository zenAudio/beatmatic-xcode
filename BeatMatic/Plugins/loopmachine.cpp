//
//  SampleMachine.cpp
//  BeatMatic
//
//  Created by Martin Percossi on 10.09.12.
//
//

#include "loopmachine.h"
#include "AudioEngineImpl.h"

SampleMachine::SampleMachine(AudioEngineImpl& engine) : audioEngine(engine) {
    for (int i = 0; i < MAX_NUM_LOOPS; i++)
        synth.addVoice(new SamplerVoice);
}

void SampleMachine::init() {
    // we want to get notified of midi events!
    audioEngine.getAudioMgr().addMidiInputCallback(String::empty, &midiCollector);
}

void SampleMachine::addLoopVariant(String soundName, File sample) {
    WavAudioFormat wavFormat;
    
    ScopedPointer<AudioFormatReader> audioReader(wavFormat.createReaderFor(new FileInputStream(sample), true));
    
    if (!loopTypeToRange.contains(soundName)) {
        int startIx = MAX_NUM_LOOP_VARIANTS*loopTypeToRange.size();
        int endIx = startIx;
        
        loopTypeToRange.set(soundName, Range<int>(startIx, endIx));
    }
    
    Range<int> noteRange = loopTypeToRange[soundName];
    
    int end = noteRange.getEnd() + 1;
    
    BigInteger notes;
    notes.setRange(noteRange.getStart(), end - noteRange.getStart(), true);
    
    synth.addSound(new SamplerSound(soundName, *audioReader, notes,
                                    end,   // root midi note
                                    0.0,  // attack time
                                    0.0,  // release time
                                    10.0  // maximum sample length
                                    ));
    
    loopTypeToRange[soundName].setEnd(end);
}

void SampleMachine::prepareToPlay(int /*samplesPerBlockExpected*/, double sampleRate) {
    midiCollector.reset(sampleRate);
    synth.setCurrentPlaybackSampleRate(sampleRate);
}

void SampleMachine::releaseResources() {
}

void SampleMachine::getNextAudioBlock(const AudioSourceChannelInfo& bufferToFill) {
    // the synth always adds its output to the audio buffer, so we have to clear it
    // first..
    bufferToFill.clearActiveBufferRegion();
    
    // fill a midi buffer with incoming messages from the midi input.
    MidiBuffer incomingMidi;
    midiCollector.removeNextBlockOfMessages(incomingMidi, bufferToFill.numSamples);
    
    // pass these messages to the keyboard state so that it can update the component
    // to show on-screen which keys are being pressed on the physical midi keyboard.
    // This call will also add midi messages to the buffer which were generated by
    // the mouse-clicking on the on-screen keyboard.
    keyboardState.processNextMidiBuffer(incomingMidi, 0, bufferToFill.numSamples, true);
    
    // and now get the synth to process the midi events and generate its output.
    synth.renderNextBlock(*bufferToFill.buffer, incomingMidi, 0, bufferToFill.numSamples);
}

void SampleMachine::setLooperPreset(const char * const presetFilename) {
    std::cout << "MPD: CPP: AudioEngineImpl::setLooperPreset: setting looper preset to: " << presetFilename << std::endl;
    
    File presetFile(presetFilename);
    File presetDir = presetFile.getParentDirectory();
    var preset = JSON::parse(presetFile);
    
    std::cout << "MPD: CPP: AudioEngineImpl::setLooperPreset: preset json: " << preset.toString() << std::endl;
    
    auto& obj = *preset.getDynamicObject();
    
    std::cout << "MPD: CPP: AudioEngineImpl::setLooperPreset: preset name: " << obj.getProperty("preset").toString()
    << "; created by: " << obj.getProperty("preset").toString() << std::endl;
    
    var loops = obj.getProperty("loops");
    
    BigInteger allNotes;
    allNotes.setRange(0, 128, true);
    
    for (int i = 0; i < loops.size(); i++) {
        var loop = loops[i];
        auto& obj = *loop.getDynamicObject();
        String typeName = obj.getProperty("type");
        std::cout << "MPD: CPP: AudioEngineImpl::setLooperPreset: adding loop: " << typeName << std::endl;
        
        var loopVariants = obj.getProperty("variants");
        for (int j = 0; j < loopVariants.size(); j++) {
            File sample = presetDir.getChildFile(loopVariants[j].toString());
            
            std::cout << "MPD: CPP: AudioEngineImpl::setLooperPreset: adding sample: "
            << sample.getFullPathName() << std::endl;
            
            addLoopVariant(typeName, sample);
        }
    }
}


void SampleMachine::noteOn(int note, float velocity) {
    synth.noteOn(1, note, velocity);
}

void SampleMachine::noteOff(int note, float velocity) {
    synth.noteOff(1, note, true);
}