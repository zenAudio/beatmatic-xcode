// Generated by CoffeeScript 1.3.3
(function() {
  var dj,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  dj = (function() {

    function dj() {
      this.clickHandler = __bind(this.clickHandler, this);
      this.setupClickHandlers();
    }

    dj.prototype.setupClickHandlers = function() {
      var button, _i, _len, _ref, _results;
      _ref = $(".djbtn");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        button = _ref[_i];
        _results.push(this.setupClickHandler(button));
      }
      return _results;
    };

    dj.prototype.setupClickHandler = function(button) {
      button = $(button);
      return button.click(this.clickHandler);
    };

    dj.prototype.toggleButtonState = function(button) {
      if (button.hasClass("active")) {
        return button.removeClass("active");
      } else {
        return button.addClass("active");
      }
    };

    dj.prototype.clickHandler = function(e) {
      var btn, btnname, _name, _name1, _name2;
      btn = window.b1 = $(e.currentTarget);
      btnname = btn.attr("name");
      if (typeof this[_name = btnname + "Toggle"] === "function") {
        this[_name](btn);
      }
      if (btn.hasClass("active")) {
        if (typeof this[_name1 = btnname + "Off"] === "function" ? this[_name1](btn) : void 0) {
          return;
        }
      } else {
        if (typeof this[_name2 = btnname + "On"] === "function" ? this[_name2](btn) : void 0) {
          return;
        }
      }
      return this.toggleButtonState(btn);
    };

    dj.prototype.kickdrumOn = function(btn) {
      return console.log("happy bunny");
    };

    dj.prototype.kickdrumOff = function(btn) {
      return console.log("sad bunny");
    };

    return dj;

  })();

  $(function() {
    return BEATmatic.dj = new dj();
  });

}).call(this);
