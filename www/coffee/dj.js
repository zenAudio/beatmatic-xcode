// Generated by CoffeeScript 1.3.3
(function() {
  var dj,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  dj = (function() {

    function dj() {
      this.clickHandler = __bind(this.clickHandler, this);
      BEATmatic.sequencer.sampleTracks = {
        baseline: "Synth_5.wav",
        percussion: "Percussion_2.wav",
        synth: "Synth_12.wav",
        melodic: "Melodic_5.wav"
      };
      $(".returnbtn").click(function() {
        BEATmatic.sequencer.stopCoreLoop();
        BEATmatic.ui["switch"]("main");
        return false;
      });
      this.setupClickHandlers();
    }

    dj.prototype.setupClickHandlers = function() {
      var button, _i, _len, _ref, _results;
      _ref = $(".djbtn");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        button = _ref[_i];
        _results.push(this.setupClickHandler(button));
      }
      return _results;
    };

    dj.prototype.setupClickHandler = function(button) {
      button = $(button);
      return button.click(this.clickHandler);
    };

    dj.prototype.resetButtons = function() {
      var btn, btnbase, btnname, i, _i, _len, _ref, _results;
      _ref = $(".djbtn");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        btn = _ref[_i];
        btn = $(btn);
        btnname = btn.attr("name");
        i = btnname.indexOf(".");
        btnbase = btnname.slice(0, i);
        if (btnbase === "drums") {
          _results.push(btn.addClass("active"));
        } else {
          _results.push(btn.removeClass("active"));
        }
      }
      return _results;
    };

    dj.prototype.toggleButtonState = function(button) {
      if (button.hasClass("active")) {
        return button.removeClass("active");
      } else {
        return button.addClass("active");
      }
    };

    dj.prototype.clickHandler = function(e) {
      var btn, btnbase, btnname, btnspecific, i, _name, _name1, _name2;
      btn = window.b1 = $(e.currentTarget);
      btnname = btn.attr("name");
      i = btnname.indexOf(".");
      btnbase = btnname.slice(0, i);
      btnspecific = btnname.slice(i + 1);
      if (typeof this[_name = btnbase + "Toggle"] === "function") {
        this[_name](btnspecific, btn);
      }
      if (btn.hasClass("active")) {
        if (typeof this[_name1 = btnbase + "Off"] === "function") {
          this[_name1](btnspecific, btn);
        }
      } else {
        if (typeof this[_name2 = btnbase + "On"] === "function") {
          this[_name2](btnspecific, btn);
        }
      }
      return this.toggleButtonState(btn);
    };

    dj.prototype.drumsOn = function(drum, btn) {
      switch (drum) {
        case "kickdrum":
          BEATmatic.sequencer.unMuteDrum(0);
          break;
        case "snare":
          BEATmatic.sequencer.unMuteDrum(1);
          break;
        case "hihat":
          BEATmatic.sequencer.unMuteDrum(2);
          break;
        default:
          console.log("unknown drum");
      }
      return false;
    };

    dj.prototype.drumsOff = function(drum, btn) {
      switch (drum) {
        case "kickdrum":
          BEATmatic.sequencer.muteDrum(0);
          break;
        case "snare":
          BEATmatic.sequencer.muteDrum(1);
          break;
        case "hihat":
          BEATmatic.sequencer.muteDrum(2);
          break;
        default:
          console.log("unknown drum");
      }
      return false;
    };

    dj.prototype.sampleOn = function(sample, btn) {
      BEATmatic.sequencer.playSample(sample);
      return false;
    };

    dj.prototype.sampleOff = function(sample, btn) {
      BEATmatic.sequencer.stopSample(sample);
      return false;
    };

    return dj;

  })();

  $(function() {
    return BEATmatic.dj = new dj();
  });

}).call(this);
