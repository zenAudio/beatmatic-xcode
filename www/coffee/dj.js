// Generated by CoffeeScript 1.3.3
(function() {
  var dj,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  dj = (function() {

    dj.prototype.swipeSampleLayover = false;

    dj.prototype.swipeVolumeLayover = false;

    dj.prototype.lastSample = false;

    dj.prototype.originalbpm = false;

    dj.prototype.direction = false;

    dj.prototype.lastDistance = 0;

    function dj() {
      this.enableSwipe = __bind(this.enableSwipe, this);

      this.clickHandler = __bind(this.clickHandler, this);
      BEATmatic.sequencer.sampleTracks = {
        baseline: "Synth_5.wav",
        percussion: "Percussion_2.wav",
        synth: "Synth_12.wav",
        melodic: "Melodic_5.wav"
      };
      $(".returnbtn").click(function() {
        BEATmatic.sequencer.stopCoreLoop();
        BEATmatic.ui["switch"]("main");
        return false;
      });
      this.setupClickHandlers();
    }

    dj.prototype.setupClickHandlers = function() {
      var button, _i, _len, _ref, _results;
      _ref = $(".djbtn");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        button = _ref[_i];
        _results.push(this.setupClickHandler(button));
      }
      return _results;
    };

    dj.prototype.setupClickHandler = function(button) {
      button = $(button);
      return button.click(this.clickHandler);
    };

    dj.prototype.resetButtons = function() {
      var btn, btnbase, btnname, i, _i, _len, _ref, _results;
      _ref = $(".djbtn");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        btn = _ref[_i];
        btn = $(btn);
        btnname = btn.attr("name");
        i = btnname.indexOf(".");
        btnbase = btnname.slice(0, i);
        if (btnbase === "drums") {
          _results.push(btn.addClass("active"));
        } else {
          _results.push(btn.removeClass("active"));
        }
      }
      return _results;
    };

    dj.prototype.toggleButtonState = function(button) {
      if (button.hasClass("active")) {
        return button.removeClass("active");
      } else {
        return button.addClass("active");
      }
    };

    dj.prototype.clickHandler = function(e) {
      var btn, btnbase, btnname, btnspecific, i, _name, _name1, _name2;
      btn = window.b1 = $(e.currentTarget);
      btnname = btn.attr("name");
      i = btnname.indexOf(".");
      btnbase = btnname.slice(0, i);
      btnspecific = btnname.slice(i + 1);
      if (typeof this[_name = btnbase + "Toggle"] === "function") {
        this[_name](btnspecific, btn);
      }
      if (btn.hasClass("active")) {
        if (typeof this[_name1 = btnbase + "Off"] === "function") {
          this[_name1](btnspecific, btn);
        }
      } else {
        if (typeof this[_name2 = btnbase + "On"] === "function") {
          this[_name2](btnspecific, btn);
        }
      }
      return this.toggleButtonState(btn);
    };

    dj.prototype.drumsOn = function(drum, btn) {
      switch (drum) {
        case "kickdrum":
          BEATmatic.sequencer.unMuteDrum(0);
          break;
        case "snare":
          BEATmatic.sequencer.unMuteDrum(1);
          break;
        case "hihat":
          BEATmatic.sequencer.unMuteDrum(2);
          break;
        default:
          console.log("unknown drum");
      }
      return false;
    };

    dj.prototype.drumsOff = function(drum, btn) {
      switch (drum) {
        case "kickdrum":
          BEATmatic.sequencer.muteDrum(0);
          break;
        case "snare":
          BEATmatic.sequencer.muteDrum(1);
          break;
        case "hihat":
          BEATmatic.sequencer.muteDrum(2);
          break;
        default:
          console.log("unknown drum");
      }
      return false;
    };

    dj.prototype.sampleOn = function(sample, btn) {
      BEATmatic.sequencer.playSample(sample);
      return false;
    };

    dj.prototype.sampleOff = function(sample, btn) {
      BEATmatic.sequencer.stopSample(sample);
      return false;
    };

    dj.prototype.enableSwipe = function() {
      var _this = this;
      return $("#dj").swipe({
        click: function(e, target) {
          return true;
        },
        /*
        			click: (e, target) =>
        				score = e.target.cellIndex
        				track = e.target.parentNode.rowIndex
        				
        				cell = $($(".c#{score}")[track])
        				if cell.hasClass "x100"
        					cell.removeClass "x100"
        					BEATmatic.sequencer.drumTracks.tracks[track].score[score - 1] = 0
        				else
        					cell.addClass "x100"
        					
        					BEATmatic.sequencer.drumTracks.tracks[track].score[score - 1] = 100
        */

        swipeStatus: function(e, phase, direction, distance) {
          var offset;
          if (phase === "cancel" || phase === "end") {
            _this.direction = false;
            _this.lastDistance = 0;
            if (_this.swipeSampleLayover) {
              $("#swipeDJSampleLayover").hide();
              _this.swipeSampleLayover = false;
              BEATmatic.sequencer.stopCoreLoop();
              BEATmatic.sequencer.startCoreLoop();
            }
            if (_this.swipeVolumeLayover) {
              $("#swipeDJVolumeLayover").hide();
              _this.originalbpm = false;
              _this.swipeVolumeLayover = false;
            }
            return;
          }
          if (distance <= 5) {
            return;
          }
          /*
          				if direction is "left" or direction is "right"
          					@direction = "leftright" unless @direction
          					return if "leftright" != @direction
          						
          					unless @swipeSampleLayover
          						#@stopLoop()
          						BEATmatic.sequencer.stopCoreLoop()
          						@swipeSampleLayover = true
          						
          						$("#swipeDJSampleLayover").show()
          						@samplebase = false
          
          					
          					unless @lastUpDownDirection is direction
          						@lastDistance = distance
          						@lastUpDownDirection = direction
          					
          					move = distance - @lastDistance
          					
          					
          					#mouse move above 10px or below -10
          					if (move < 10) and (move > -10)
          						#console.log "did not move enough"
          						#console.log move
          						return
          
          											
          					@lastDistance = distance
          					
          					track = e.target.parentNode.rowIndex
          					sample = BEATmatic.sequencer.drumTracks.tracks[track].sample
          					i = sample.indexOf "0"
          					n = Number sample[i+1]
          					unless @samplebase
          						@samplebase = sample[...i]
          					
          					
          					
          					if direction is "left"
          						n++ unless n >= 7
          						
          					
          					if direction is "right"
          						n-- unless n <= 1
          						
          					
          					newsample = @samplebase + 0 + n + sample[i+2...]
          					#return
          					BEATmatic.sequencer.playAudio BEATmatic.sequencer.folder + "drums/" +  newsample
          					BEATmatic.sequencer.drumTracks.tracks[track].sample = newsample
          					
          					$("#swipeDJSampleLayover").html(newsample)
          */

          if (direction === "up" || direction === "down") {
            if (!_this.direction) {
              _this.direction = "updown";
            }
            if ("updown" !== _this.direction) {
              return;
            }
            if (!_this.swipeVolumeLayover) {
              $("#swipeDJVolumeLayover").show();
              _this.swipeVolumeLayover = true;
            }
            offset = Math.round(distance / 2);
            if (direction === "down") {
              offset = offset * -1;
            }
            if (!_this.originalbpm) {
              _this.originalbpm = BEATmatic.sequencer.BPM;
            }
            $("#swipeDJVolumeLayover").html("" + (_this.originalbpm + offset) + " BPM");
            BEATmatic.sequencer.changeBPM(_this.originalbpm + offset);
          }
        },
        allowPageScroll: "none",
        threshold: 50
      });
    };

    return dj;

  })();

  $(function() {
    return BEATmatic.dj = new dj();
  });

}).call(this);
