// Generated by CoffeeScript 1.3.3
(function() {
  var play, sequencer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sequencer = (function() {

    function sequencer() {}

    sequencer.prototype.coreLoop = false;

    sequencer.prototype.BPM = 120;

    sequencer.prototype.beat16 = 1;

    sequencer.prototype.beatTotal = 1;

    sequencer.prototype.record = false;

    sequencer.prototype.recording = {};

    sequencer.prototype.highlightPlayer = false;

    sequencer.prototype.folder = "sounds/";

    sequencer.prototype.drumTracksToPlay = [0, 1, 2];

    sequencer.prototype.drumTracks = {};

    sequencer.prototype.sampleTacksToPlay = [];

    sequencer.prototype.sampleTracks = {};

    sequencer.prototype.setup = function(tracks) {
      this.drumTracks = tracks;
      this.BPM = this.drumTracks.bpm;
      return this.startCoreLoop();
    };

    sequencer.prototype.beat = function() {
      var sample, samplesPlayed, track, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.drumTracksToPlay;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        if (this.drumTracks.tracks[track].score[this.beat16 - 1] >= 100) {
          this.playAudio(this.folder + "drums/" + this.drumTracks.tracks[track].sample);
        }
      }
      samplesPlayed = [];
      _ref1 = this.sampleTacksToPlay;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        track = _ref1[_j];
        sample = this.sampleTracks[track];
        samplesPlayed.push(sample);
        this.playAdjustedAudio(this.folder + "samples/" + sample);
      }
      if (this.highlightPlayer) {
        BEATmatic.play.highlightColumn(this.beat16);
      }
      if (record) {
        recording[this.beatTotal] = {
          "beat16": this.beat16,
          "samples": samplesPlayed,
          "BPM": this.BPM,
          "drums": this.drumTracksToPlay
        };
      }
      return this.sampleTacksToPlay = {};
    };

    sequencer.prototype.playAdjustedAudio = function(src) {
      return this.playAudio(src);
    };

    sequencer.prototype.playAudio = function(src) {
      var my_media;
      if (typeof Media !== "undefined" && Media !== null) {
        my_media = new Media(src);
        return my_media.play();
      } else {
        return new Audio(src).play();
      }
    };

    sequencer.prototype.changeBPM = function(newBPM) {
      this.BPM = newBPM;
      console.log("changed BPM to " + newBPM);
      this.stopCoreLoop();
      return this.startCoreLoop();
    };

    sequencer.prototype.startCoreLoop = function() {
      var ms,
        _this = this;
      ms = 15000 / this.BPM;
      ms = ms.toFixed(0);
      return this.coreLoop = setInterval(function() {
        _this.beat();
        _this.beat16++;
        _this.beatTotal++;
        if (_this.beat16 === 17) {
          return _this.beat16 = 1;
        }
      }, ms);
    };

    sequencer.prototype.stopCoreLoop = function() {
      clearInterval(this.coreLoop);
      if (this.highlightPlayer) {
        return $(".highlighted").removeClass("highlighted");
      }
    };

    sequencer.prototype.onError = function(error) {
      return alert("code: " + error.code + "\n" + "message: " + error.message + "\n");
    };

    return sequencer;

  })();

  $(function() {
    return BEATmatic.sequencer = new sequencer();
  });

  play = (function() {

    play.prototype.loopTimers = {};

    play.prototype.swipeSampleLayover = false;

    play.prototype.swipeVolumeLayover = false;

    play.prototype.lastSample = false;

    play.prototype.originalbpm = false;

    play.prototype.direction = false;

    play.prototype.lastDistance = 0;

    function play() {
      this.generateHTML = __bind(this.generateHTML, this);

      this.setup = __bind(this.setup, this);

      var _this = this;
      $("#snext").click(function() {
        BEATmatic.ui["switch"]("dj");
        BEATmatic.sequencer.highlightPlayer = false;
        return false;
      });
      $("sback").click(function() {
        BEATmatic.sequencer.stopCoreLoop();
        BEATmatic.ui["switch"]("main");
        BEATmatic.sequencer.highlightPlayer = false;
        return false;
      });
      this.setup("demo");
    }

    play.prototype.setup = function(data) {
      if (data === "demo") {
        BEATmatic.sequencer.setup({
          "project": "House Beat 1",
          "bpm": 130,
          "tracks": [
            {
              "name": "kick drum",
              "sample": "kick01.wav",
              "icon": "kickdrum.png",
              "score": [100, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 0, 0, 0, 0, 0]
            }, {
              "name": "snare drum",
              "sample": "snare01.wav",
              "icon": "snaredrum.png",
              "score": [0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0]
            }, {
              "name": "hi hat",
              "sample": "hihat01.wav",
              "icon": "hihat.png",
              "score": [0, 0, 100, 0, 0, 0, 100, 0, 0, 0, 100, 0, 0, 0, 100, 0]
            }
          ]
        });
      } else {
        BEATmatic.sequencer.setup(data);
      }
      this.generateHTML();
      return BEATmatic.sequencer.highlightPlayer = true;
    };

    play.prototype.generateHTML = function() {
      var html, index, score, track, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      html = "<table id=\"hor-minimalist-a\" class=\"fulltable\" summary=\"Matrix\">";
      _ref = BEATmatic.sequencer.drumTracks.tracks;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        track = _ref[index];
        html += "<tr>";
        html += "<td class=\"\"><img width=\"50\" height=\"50\" src=\"img/" + track.icon + "\" alt=\"" + track.name + "\"/></td>";
        _ref1 = track.score;
        for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
          score = _ref1[index];
          if (score >= 100) {
            score = 100;
          }
          html += "<td class=\"x" + score + " c" + (index + 1) + "\"></td>";
        }
        html += "</tr>";
      }
      html += "</table>";
      $("#matrix").html(html);
      return $("#hor-minimalist-a").swipe({
        click: function(e, target) {
          var cell;
          score = e.target.cellIndex;
          track = e.target.parentNode.rowIndex;
          cell = $($(".c" + score)[track]);
          if (cell.hasClass("x100")) {
            cell.removeClass("x100");
            return BEATmatic.sequencer.drumTracks.tracks[track].score[score - 1] = 0;
          } else {
            cell.addClass("x100");
            return BEATmatic.sequencer.drumTracks.tracks[track].score[score - 1] = 100;
          }
        },
        swipeStatus: function(e, phase, direction, distance) {
          var i, move, n, newsample, offset, sample;
          if (phase === "cancel" || phase === "end") {
            console.log("****END****");
            _this.direction = false;
            _this.lastDistance = 0;
            if (_this.swipeSampleLayover) {
              $("#swipeSampleLayover").hide();
              _this.swipeSampleLayover = false;
              _this.stopLoop();
              _this.loopTracks();
            }
            if (_this.swipeVolumeLayover) {
              $("#swipeVolumeLayover").hide();
              _this.originalbpm = false;
              _this.swipeVolumeLayover = false;
            }
            return;
          }
          if (distance <= 5) {
            return;
          }
          if (direction === "up" || direction === "down") {
            if (!_this.direction) {
              _this.direction = "updown";
            }
            if ("updown" !== _this.direction) {
              return;
            }
            if (!_this.swipeSampleLayover) {
              _this.stopLoop();
              _this.swipeSampleLayover = true;
              /*
              
              						if e.pageX
              							x = e.pageX
              						else
              							x = e.touches[0].pageX
              						
              						if e.pageY
              							y = e.pageY
              						else
              							y = e.touches[0].pageY	
              						
              						totalHeight = $("body").height()
              						layoverHeight = $("#swipeSampleLayover").height()
              						offset = 0
              						
              						
              						if y < layoverHeight/2
              							#console.log "<"
              							offset = layoverHeight/2 - y
              							#x = layoverHeight/2
              						
              						#console.log "totalHeight - y < layoverHeight/2 : #{totalHeight - y} < #{layoverHeight/2} #{totalHeight - y < layoverHeight/2}"
              						
              						if totalHeight - y < layoverHeight/2
              							#console.log ">"
              							offset = totalHeight - y - layoverHeight/2
              						
              						
              						#console.log offset
              						$("#swipeSampleLayover").css "top", y + offset - layoverHeight/2
              						#console.log e.touches
              						#console.log e
              						$("#swipeSampleLayover").css "left", x - 10
              						#$("#swipeSampleLayover").css "left", 15
              */

              $("#swipeSampleLayover").show();
              _this.samplebase = false;
            }
            move = distance - _this.lastDistance;
            console.log("***");
            console.log(distance);
            console.log(_this.lastDistance);
            console.log(move);
            console.log("***");
            if ((move < 10) && (move > -10)) {
              console.log("did not move enough");
              console.log(move);
              return;
            }
            _this.lastDistance = distance;
            track = e.target.parentNode.rowIndex;
            sample = BEATmatic.sequencer.drumTracks.tracks[track].sample;
            i = sample.indexOf("0");
            n = Number(sample[i + 1]);
            if (!_this.samplebase) {
              _this.samplebase = sample.slice(0, i);
            }
            if (direction === "up") {
              if (!(n >= 7)) {
                n++;
              }
            }
            if (direction === "down") {
              if (!(n <= 1)) {
                n--;
              }
            }
            newsample = _this.samplebase + 0 + n + sample.slice(i + 2);
            _this.playAudio(_this.folder + newsample);
            BEATmatic.sequencer.drumTracks.tracks[track].sample = newsample;
            $("#swipeSampleLayover").html(newsample);
          }
          if (direction === "left" || direction === "right") {
            if (!_this.direction) {
              _this.direction = "leftright";
            }
            if ("leftright" !== _this.direction) {
              return;
            }
            if (!_this.swipeVolumeLayover) {
              $("#swipeVolumeLayover").show();
              _this.swipeVolumeLayover = true;
            }
            offset = Math.round(distance / 2);
            if (direction === "left") {
              offset = offset * -1;
            }
            if (!_this.originalbpm) {
              _this.originalbpm = BEATmatic.sequencer.BPM;
            }
            $("#swipeVolumeLayover").html("" + (_this.originalbpm + offset) + " BPM");
            BEATmatic.sequencer.changeBPM(_this.originalbpm + offset);
          }
        },
        allowPageScroll: "none",
        threshold: 50
      });
      /*
      		
      		$("#hor-minimalist-a").click (e) =>
      			#console.log e
      			#console.log e.target.parentNode.rowIndex
      			#console.log e.target.cellIndex
      			
      			score = e.target.cellIndex
      			track = e.target.parentNode.rowIndex
      			cell = $($(".c#{score}")[track])
      			if cell.hasClass "x100"
      				cell.removeClass "x100"
      				BEATmatic.sequencer.drumTracks.tracks[track].score[score - 1] = 0
      			else
      				cell.addClass "x100"
      				BEATmatic.sequencer.drumTracks.tracks[track].score[score - 1] = 100
      */

    };

    play.prototype.highlightColumn = function(col) {
      $(".c" + col).addClass("highlighted");
      col = col - 1;
      if (col === 0) {
        col = 16;
      }
      return $(".c" + col).removeClass("highlighted");
    };

    return play;

  })();

  $(function() {
    return BEATmatic.play = new play();
  });

}).call(this);
