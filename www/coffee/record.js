// Generated by CoffeeScript 1.3.3
(function() {
  var app,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  app = (function() {

    app.prototype.ready = false;

    app.prototype.url = "http://192.168.2.105:5000/";

    function app() {
      this.uploadFile = __bind(this.uploadFile, this);

      this.onSuccess = __bind(this.onSuccess, this);

      this.recordAudio3 = __bind(this.recordAudio3, this);

      this.fileReady = __bind(this.fileReady, this);

      this.gotFS = __bind(this.gotFS, this);

      this.deviceready = __bind(this.deviceready, this);

      var _this = this;
      window.document.addEventListener("deviceready", this.deviceready, false);
      this.setup = true;
      this.ready = false;
      toTable;

      $("#toTable").click(function() {
        window.localStorage.setItem("recordResults", "demo");
        return window.location.href = 'table.html';
      });
      $("#tester").click(function() {
        var ft, my_media, name, path;
        console.log("tester");
        my_media = new Media("sounds/tester.wav", nothing, nothing);
        console.log("starting upload");
        console.log(my_media);
        ft = new FileTransfer();
        path = my_media.fullPath;
        name = my_media.name;
        return ft.upload(path, _this.url, (function(result) {
          var data;
          data = decodeURIComponent(result.response);
          window.localStorage.setItem("recordResults", data);
          return window.location.href = 'table.html';
        }), (function(error) {
          return console.log("Error uploading file " + path + ": " + error.code);
        }), {
          fileName: name
        });
      });
      $("#record").click(function() {
        return _this.recordAudio3();
      });
      $("#processingrecord").click(function() {
        $("#stoprecord").hide();
        $("#processingrecord").hide();
        $("#record").show();
        return _this.mediaRec.stopRecord();
      });
      $("#stoprecord").click(function() {
        console.log("stoprecord click");
        $("#stoprecord").hide();
        $("#processingrecord").show();
        $("#record").hide();
        return _this.mediaRec.stopRecord();
      });
    }

    app.prototype.deviceready = function() {
      console.log("device is ready!!!");
      window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, this.gotFS, this.nothing);
      this.ready = true;
      return this.report("deviceready");
    };

    app.prototype.report = function(id) {
      var completeElem;
      console.log("report:" + id);
      document.querySelector("#" + id + " .pending").className += " hide";
      completeElem = document.querySelector("#" + id + " .complete");
      return completeElem.className = completeElem.className.split("hide").join("");
    };

    app.prototype.recordSuccess = function(mediaFiles) {
      var i, len, path, _results;
      console.log("record success");
      i = void 0;
      path = void 0;
      len = void 0;
      i = 0;
      len = mediaFiles.length;
      _results = [];
      while (i < len) {
        this.uploadFile(mediaFiles[i]);
        _results.push(i += 1);
      }
      return _results;
    };

    app.prototype.recordError = function(error) {
      console.log("record failed");
      return navigator.notification.alert("Error code: " + error.code, null, "Capture Error");
    };

    app.prototype.recordSound = function() {
      var options;
      navigator.device.capture.captureAudio(this.recordSuccess, this.recordError, {
        duration: 5,
        limit: 1
      });
      return;
      return options = {
        duration: 10
      };
    };

    app.prototype.getFilePath = function() {
      if (device.platform === "Android") {
        return "file:///android_asset/www/res/db/";
      } else {
        return "res//db//";
      }
    };

    app.prototype.gotFS = function(fileSystem) {
      console.log("got filesystem");
      this.fileSystem = fileSystem;
      this.src = "test.wav";
      return this.fileSystem.root.getFile(this.src, {
        create: true
      }, this.fileReady, this.nothing);
    };

    app.prototype.fileReady = function(fileEntry) {
      return this.recordFile = fileEntry;
    };

    app.prototype.nothing = function() {};

    app.prototype.recordAudio3 = function(fileEntry) {
      var recInterval, recTime;
      $("#record").hide();
      $("#stoprecord").show();
      $("#processingrecord").hide();
      this.mediaRec = new Media(this.recordFile.fullPath, this.onSuccess, this.onError);
      this.mediaRec.startRecord();
      recTime = 0;
      return recInterval = setInterval(function() {
        recTime = recTime + 1;
        return setAudioPosition(recTime + " sec");
      }, 1000);
    };

    app.prototype.onSuccess = function() {
      console.log("recordAudio():Audio Success");
      return this.uploadFile();
    };

    app.prototype.uploadFile = function() {
      var ft, mediaFile, name, path;
      console.log("starting upload");
      mediaFile = this.recordFile;
      ft = new FileTransfer();
      path = mediaFile.fullPath;
      name = mediaFile.name;
      return ft.upload(path, this.url, (function(result) {
        var data;
        data = decodeURIComponent(result.response);
        window.localStorage.setItem("recordResults", data);
        return window.location.href = 'table.html';
      }), (function(error) {
        return console.log("Error uploading file " + path + ": " + error.code);
      }), {
        fileName: name
      });
    };

    app.prototype.onError = function(error) {
      return alert("code: " + error.code + "\n" + "message: " + error.message + "\n");
    };

    app.prototype.setAudioPosition = function(position) {
      return document.getElementById("audio_position").innerHTML = position;
    };

    /*	
    	getImage: ->
    		
    		# Retrieve image file location from specified source
    		navigator.camera.getPicture uploadPhoto, ((message) ->
    			alert "get picture failed"
    		),
    			quality: 50
    			destinationType: navigator.camera.DestinationType.FILE_URI
    			sourceType: navigator.camera.PictureSourceType.PHOTOLIBRARY
    	
    	uploadPhoto: (imageURI) ->
    		options = new FileUploadOptions()
    		options.fileKey = "file"
    		options.fileName = imageURI.substr(imageURI.lastIndexOf("/") + 1)
    		options.mimeType = "image/jpeg"
    		params = new Object()
    		params.value1 = "test"
    		params.value2 = "param"
    		options.params = params
    		options.chunkedMode = false
    		ft = new FileTransfer()
    		ft.upload imageURI, "http://yourdomain.com/upload.php", win, fail, options
    */


    return app;

  })();

  window.app = new app();

}).call(this);
