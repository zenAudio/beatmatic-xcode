// Generated by CoffeeScript 1.3.3
(function() {
  var rec,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  rec = (function() {

    rec.prototype.ready = false;

    rec.prototype.url = "http://ec2-46-51-129-29.eu-west-1.compute.amazonaws.com/";

    function rec() {
      this.uploadError = __bind(this.uploadError, this);

      this.uploadSuccess = __bind(this.uploadSuccess, this);

      this.uploadFile = __bind(this.uploadFile, this);

      this.onSuccess = __bind(this.onSuccess, this);

      this.recordAudio3 = __bind(this.recordAudio3, this);

      this.fileReady = __bind(this.fileReady, this);

      this.gotFS = __bind(this.gotFS, this);

      this.deviceready = __bind(this.deviceready, this);

      var _this = this;
      window.document.addEventListener("deviceready", this.deviceready, false);
      this.setup = true;
      this.ready = false;
      $("#toTable").click(function() {
        BEATmatic.play.setup("demo");
        return BEATmatic.ui["switch"]("synth");
      });
      $("#record").click(function() {
        return _this.recordAudio3();
      });
      $("#processingrecord").click(function() {
        _this.switchButtons("record");
        return _this.mediaRec.stopRecord();
      });
      $("#stoprecord").click(function() {
        _this.switchButtons("processingrecord");
        return _this.mediaRec.stopRecord();
      });
    }

    rec.prototype.switchButtons = function(buttonToShow) {
      var button, _i, _len, _ref, _results;
      _ref = ["stoprecord", "processingrecord", "record"];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        button = _ref[_i];
        if (button === buttonToShow) {
          _results.push($("#" + button).show());
        } else {
          _results.push($("#" + button).hide());
        }
      }
      return _results;
    };

    rec.prototype.deviceready = function() {
      var completeElem;
      window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, this.gotFS, this.nothing);
      document.querySelector("#deviceready .pending").className += " hide";
      completeElem = document.querySelector("#deviceready .complete");
      return completeElem.className = completeElem.className.split("hide").join("");
    };

    rec.prototype.getFilePath = function() {
      if (device.platform === "Android") {
        return "file:///android_asset/www/res/db/";
      } else {
        return "res//db//";
      }
    };

    rec.prototype.gotFS = function(fileSystem) {
      console.log("got filesystem");
      this.fileSystem = fileSystem;
      this.src = "test.wav";
      return this.fileSystem.root.getFile(this.src, {
        create: true
      }, this.fileReady, this.nothing);
    };

    rec.prototype.fileReady = function(fileEntry) {
      return this.recordFile = fileEntry;
    };

    rec.prototype.nothing = function() {};

    rec.prototype.recordAudio3 = function(fileEntry) {
      this.switchButtons("stoprecord");
      this.mediaRec = new Media(this.recordFile.fullPath, this.onSuccess, this.onError);
      return this.mediaRec.startRecord();
      /*
      		recTime = 0
      		recInterval = setInterval(->
      			recTime = recTime + 1
      			setAudioPosition recTime + " sec"
      			#if recTime >= 10
      			#	clearInterval recInterval
      			#	@mediaRec.stopRecord()
      		, 1000)#http://localhost:5000/
      */

    };

    rec.prototype.onSuccess = function() {
      console.log("recordAudio():Audio Success");
      return this.uploadFile();
    };

    rec.prototype.uploadFile = function() {
      var ft, mediaFile, name, path;
      console.log("starting upload");
      mediaFile = this.recordFile;
      ft = new FileTransfer();
      path = mediaFile.fullPath;
      name = mediaFile.name;
      return ft.upload(path, this.url, this.uploadSuccess, this.uploadError, {
        fileName: name
      });
    };

    rec.prototype.uploadSuccess = function() {
      var data;
      data = decodeURIComponent(result.response);
      BEATmatic.play.setup(JSON.parse(data));
      return BEATmatic.ui["switch"]("synth");
    };

    rec.prototype.uploadError = function(error) {
      this.switchButtons("record");
      console.log(error);
      return alert("Error uploading file to get processed. No Network?");
    };

    rec.prototype.onError = function(error) {
      return alert("code: " + error.code + "\n" + "message: " + error.message + "\n");
    };

    rec.prototype.setAudioPosition = function(position) {
      return document.getElementById("audio_position").innerHTML = position;
    };

    return rec;

  })();

  window.BEATmatic = {};

  $(function() {
    return BEATmatic.rec = new rec();
  });

}).call(this);
