// Generated by CoffeeScript 1.3.3
(function() {
  var sequencer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sequencer = (function() {

    function sequencer() {
      this.stopSample = __bind(this.stopSample, this);

      this.playSample = __bind(this.playSample, this);

      this.muteDrum = __bind(this.muteDrum, this);

      this.unMuteDrum = __bind(this.unMuteDrum, this);

    }

    sequencer.prototype.coreLoop = false;

    sequencer.prototype.BPM = 120;

    sequencer.prototype.beat16 = 1;

    sequencer.prototype.beatTotal = 1;

    sequencer.prototype.recording = false;

    sequencer.prototype.recordObject = {};

    sequencer.prototype.highlightPlayer = false;

    sequencer.prototype.folder = "sounds/";

    sequencer.prototype.drumTracksToPlay = [0, 1, 2];

    sequencer.prototype.drumTracks = {};

    sequencer.prototype.sampleTacksToPlay = [];

    sequencer.prototype.sampleTracks = {};

    sequencer.prototype.sampleTacksPlaying = {};

    sequencer.prototype.setup = function(tracks) {
      this.drumTracks = tracks;
      this.drumTracksToPlay = [0, 1, 2];
      this.recording = false;
      this.BPM = this.drumTracks.bpm;
      return this.startCoreLoop();
    };

    sequencer.prototype.beat = function() {
      var sample, samplesPlayed, track, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.drumTracksToPlay;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        if (this.drumTracks.tracks[track].score[this.beat16 - 1] >= 100) {
          this.playAudio(this.folder + "drums/" + this.drumTracks.tracks[track].sample);
        }
      }
      samplesPlayed = [];
      _ref1 = this.sampleTacksToPlay;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        track = _ref1[_j];
        sample = this.sampleTracks[track];
        samplesPlayed.push(sample);
        this.playAdjustedAudio(track, sample);
      }
      if (this.highlightPlayer) {
        BEATmatic.play.highlightColumn(this.beat16);
      }
      if (this.recording) {
        this.recordObject[this.beatTotal] = {
          "beat16": this.beat16,
          "samples": samplesPlayed,
          "BPM": this.BPM,
          "drums": this.drumTracksToPlay
        };
      }
      return this.sampleTacksToPlay = [];
    };

    sequencer.prototype.playAdjustedAudio = function(sample, src) {
      var nop, player;
      src = this.folder + "samples/" + src;
      if (typeof Cordova !== "undefined" && Cordova !== null) {
        this.sampleTacksPlaying[sample] = player = new BEATmatic.DiracPlayer(sample, src);
        console.log(player);
        nop = function() {
          return console.log("nothing");
        };
        player.prepare(nop, nop, nop);
        if (this.BPM !== 120) {
          player.changeDuration(120 / this.BPM, nop, nop, nop);
        }
        player.play(nop, nop, nop);
        return player;
      } else {
        return this.playAudio(src);
      }
    };

    sequencer.prototype.playAudio = function(src) {
      var my_media;
      if (typeof Media !== "undefined" && Media !== null) {
        my_media = new Media(src);
        return my_media.play();
      } else {
        return new Audio(src).play();
      }
    };

    sequencer.prototype.changeBPM = function(newBPM) {
      var player, samplePlaying, _ref;
      this.BPM = newBPM;
      console.log("changed BPM to " + newBPM);
      this.pauseCoreLoop();
      _ref = this.sampleTacksPlaying;
      for (samplePlaying in _ref) {
        player = _ref[samplePlaying];
        player.changeDuration(120 / this.BPM, nop, nop, nop);
      }
      return this.startCoreLoop();
    };

    sequencer.prototype.startCoreLoop = function() {
      var ms,
        _this = this;
      ms = 15000 / this.BPM;
      ms = ms.toFixed(0);
      return this.coreLoop = setInterval(function() {
        _this.beat();
        _this.beat16++;
        _this.beatTotal++;
        if (_this.beat16 === 17) {
          return _this.beat16 = 1;
        }
      }, ms);
    };

    sequencer.prototype.pauseCoreLoop = function() {
      return clearInterval(this.coreLoop);
    };

    sequencer.prototype.stopCoreLoop = function() {
      var player, samplePlaying, _ref;
      clearInterval(this.coreLoop);
      if (this.highlightPlayer) {
        $(".highlighted").removeClass("highlighted");
      }
      _ref = this.sampleTacksPlaying;
      for (samplePlaying in _ref) {
        player = _ref[samplePlaying];
        player.stop();
      }
      return this.sampleTacksPlaying = {};
    };

    sequencer.prototype.onError = function(error) {
      return alert("code: " + error.code + "\n" + "message: " + error.message + "\n");
    };

    sequencer.prototype.unMuteDrum = function(drumNumber) {
      if ($.inArray(drumNumber, BEATmatic.sequencer.drumTracksToPlay) === -1) {
        return BEATmatic.sequencer.drumTracksToPlay.push(drumNumber);
      }
    };

    sequencer.prototype.muteDrum = function(drumNumber) {
      var i;
      i = $.inArray(drumNumber, BEATmatic.sequencer.drumTracksToPlay);
      if (i === -1) {
        return;
      }
      return BEATmatic.sequencer.drumTracksToPlay.splice(i, 1);
    };

    sequencer.prototype.playSample = function(sample) {
      return this.sampleTacksToPlay.push(sample);
    };

    sequencer.prototype.stopSample = function(sample) {
      var i, player, samplePlaying, _ref, _results;
      i = $.inArray(sample, BEATmatic.sequencer.sampleTacksToPlay);
      if (i !== -1) {
        this.sampleTacksToPlay.splice(i, 1);
      }
      _ref = this.sampleTacksPlaying;
      _results = [];
      for (samplePlaying in _ref) {
        player = _ref[samplePlaying];
        if (samplePlaying === sample) {
          player.stop();
          _results.push(delete this.sampleTacksPlaying[samplePlaying]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    sequencer.prototype.record = function() {
      return this.recording = true;
    };

    return sequencer;

  })();

  $(function() {
    return BEATmatic.sequencer = new sequencer();
  });

}).call(this);
